// Copyright (c) 2019 Blake Covarrubias
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

const crypto = require('crypto');

module.exports = {
  name: 'hubspot',
  displayName: 'HubSpot',
  description: `generate HubSpot Application or Webhook request
                signatures`,
  args: [
    {
      displayName: 'Signature Type',
      type: 'enum',
      options: [
        {
          displayName: 'Application',
          value: 'application',
          description: 'Application Request Signature',
        },
        {
          displayName: 'Webhook',
          value: 'webhook',
          description: 'Webhook Request Signature',
        },
      ],
    },
  ],

  async run(context, signatureType) {
    const {meta} = context;

    if (!meta.requestId) {
      return null;
    }

    // HubSpot specific variables
    if (!context.context.hasOwnProperty('hubspot')) {
      return null;
    }

    const hubspot = context.context.hubspot;
    const request = await context.util.models.request.getById(meta.requestId);

    if (!request) {
      throw new Error(`Request not found for ${meta.requestId}`);
    }

    // String to hash
    let sourceString = hubspot.secret;

    switch (signatureType) {
      case 'application':
        // Application signatures are generated by concatenating the
        // secret, HTTP method, URI, and request body (if present),
        // then hashing the resultant string
        sourceString += `${request.method}${request.url}`;

        // Append body to source string if present
        if (request.body.text.length > 0) {
          sourceString += request.body.text;
        }

        break;
      case 'webhook':
        // Webhook signatures are generated by concatenating the
        // secret and request body, and hashing the resultant string

        // Require request body for Webhook signatures
        if (!request.body.text) {
          return null;
        }

        sourceString += request.body.text;

        break;
    }

    // Return request signature
    return crypto.createHash('sha256').update(sourceString).digest('hex');
  },
};
